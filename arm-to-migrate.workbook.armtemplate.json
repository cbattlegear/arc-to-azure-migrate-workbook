{
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workbookDisplayName": {
      "type": "string",
      "defaultValue": "Arc Data to Azure Migrate",
      "metadata": {
        "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
      }
    },
    "workbookType": {
      "type": "string",
      "defaultValue": "workbook",
      "metadata": {
        "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
      }
    },
    "workbookSourceId": {
      "type": "string",
      "defaultValue": "azure monitor",
      "metadata": {
        "description": "The id of resource instance to which the workbook will be associated"
      }
    },
    "workbookId": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The unique guid for this workbook instance"
      }
    }
  },
  "resources": [
    {
      "name": "[parameters('workbookId')]",
      "type": "microsoft.insights/workbooks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2022-04-01",
      "dependsOn": [],
      "kind": "shared",
      "properties": {
        "displayName": "[parameters('workbookDisplayName')]",
        "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## Using Azure Arc data with Azure Migrate\\r\\n\\r\\nThis will give you a quick way to get a basic migration inventory in place in Azure Migrate once you have Arc enabled your servers. \\r\\n\\r\\n### Choosing your method\\r\\n\\r\\nBelow you will see two tabs\\r\\n\\r\\n#### Resource Graph\\r\\nThe resource graph tab will use the basic metadata provided by Arc to create a basic inventory output using the already populated data.\\r\\n\\r\\n#### VM Insights\\r\\nIf you have enabled VM Insights across your Arc enabled servers you can get even more detailed information and generalized performance data.\\r\\n\",\"style\":\"info\"},\"name\":\"text - 3\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"c0e336d4-0db5-40ef-95e4-db707ffdaad7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"DataSource\",\"label\":\"Data Source\",\"type\":11,\"description\":\"Determine which system you will use to get your migration data\",\"isRequired\":true,\"typeSettings\":{\"additionalResourceOptions\":[],\"showDefault\":false},\"jsonData\":\"[\\r\\n    \\\"Resource Graph\\\",\\r\\n    \\\"VM Insights\\\"\\r\\n]\",\"timeContext\":{\"durationMs\":86400000},\"value\":\"Resource Graph\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 3\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":1,\"content\":{\"json\":\"When you are ready, download the excel output, convert it to CSV via the tool of your choice, and [upload it to Azure Migrate](https://learn.microsoft.com/en-us/azure/migrate/tutorial-discover-import#import-the-server-information). \\r\\n\\r\\n<div style='text-align: right; font-weight: bold;'>Download the Excel output here <span style='font-size: 3em;'>↴</span></div>\"},\"name\":\"text - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"resources\\r\\n| where type == \\\"microsoft.hybridcompute/machines\\\"\\r\\n| mv-expand properties.networkProfile.networkInterfaces\\r\\n| mv-expand properties_networkProfile_networkInterfaces.ipAddresses\\r\\n| extend ipAddress = tostring(properties_networkProfile_networkInterfaces_ipAddresses.address)\\r\\n| summarize ipAddresses = make_list(ipAddress) by id, tostring(properties)\\r\\n| extend properties = parse_json(properties)\\r\\n| extend serverType = iff(properties.detectedProperties.model == \\\"Virtual Machine\\\" or properties.detectedProperties.manufacturer == \\\"VMware, Inc.\\\", \\\"Virtual\\\", \\\"Physical\\\")\\r\\n| extend hypervisor = iff(serverType == \\\"Virtual\\\", case(properties.detectedProperties.model == \\\"Virtual Machine\\\", \\\"Hyper-V\\\", properties.detectedProperties.manufacturer == \\\"VMware, Inc.\\\", \\\"Vmware\\\", \\\"\\\"), \\\"\\\")\\r\\n| extend coresPerProcessor = toint(properties.detectedProperties.logicalCoreCount)\\r\\n| extend physicalProcessors = toint(properties.detectedProperties.processorCount)\\r\\n| extend physicalCores = iff(hypervisor == \\\"Vmware\\\", physicalProcessors, coresPerProcessor * physicalProcessors)\\r\\n| extend osName = tostring(properties.osSku)\\r\\n| extend serverName = tostring(iif(properties.adFqdn == \\\"unknown\\\", properties.machineFqdn, properties.adFqdn))\\r\\n| extend memory = round(todouble(properties.detectedProperties.totalPhysicalMemoryInBytes)/1024/1024)\\r\\n| extend ipAddresses_concat = strcat_array(ipAddresses, \\\";\\\")\\r\\n| project ['Server name'] = serverName, \\r\\n            ['IP Addresses'] = ipAddresses_concat, \\r\\n            Cores = physicalCores, \\r\\n            ['Memory (In MB)'] = memory,\\r\\n            ['OS name'] = osName,\\r\\n            ['OS version'] = \\\"\\\",\\r\\n            ['OS architecture'] = \\\"\\\",\\r\\n            ['Server type'] = serverType,\\r\\n            ['Hypervisor'] = hypervisor\",\"size\":0,\"showExportToExcel\":true,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"value::all\"],\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"Server name\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"Server name\",\"sortOrder\":1}]},\"name\":\"Basic Inventory - Azure Resource Graph\"}]},\"conditionalVisibility\":{\"parameterName\":\"DataSource\",\"comparison\":\"isEqualTo\",\"value\":\"Resource Graph\"},\"name\":\"Resource Graph\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"1db90a47-04d9-4607-8acf-ae8e08bdd861\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Subscription\",\"type\":6,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"includeAll\":true},\"timeContext\":{\"durationMs\":86400000},\"value\":[]},{\"id\":\"f0432406-c6ab-44ec-ae86-2dd3ce513a2d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"VMInsightsLogAnalyticsWorkspace\",\"label\":\"VM Insights Workspace\",\"type\":5,\"description\":\"Where to query for your VM Insights monitoring data\",\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"resources\\r\\n| where type == \\\"microsoft.operationalinsights/workspaces\\\"\\r\\n| project value = id, label = name, selected = false, group = resourceGroup\",\"crossComponentResources\":[\"{Subscription}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"Query All Workspaces\",\"showDefault\":false},\"timeContext\":{\"durationMs\":86400000},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"value\":[]},{\"id\":\"c107ff90-887c-46ef-81b2-455ff30f67d3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeFrame\",\"label\":\"Time Frame\",\"type\":4,\"description\":\"Time frame to build statistics from\",\"isRequired\":true,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000}]},\"timeContext\":{\"durationMs\":86400000},\"value\":{\"durationMs\":86400000}},{\"id\":\"2ddc0b84-bfc7-46de-b8fe-161b8325e912\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Percentile\",\"type\":2,\"description\":\"What percentile to calculate performance values with\",\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    {\\\"value\\\": 99, \\\"label\\\": \\\"99th\\\"},\\r\\n    {\\\"value\\\": 95, \\\"label\\\": \\\"95th\\\"},\\r\\n    {\\\"value\\\": 90, \\\"label\\\": \\\"90th\\\"}\\r\\n]\",\"timeContext\":{\"durationMs\":86400000},\"value\":null}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 3\"},{\"type\":1,\"content\":{\"json\":\"When you are ready, download the excel output, convert it to CSV via the tool of your choice, and [upload it to Azure Migrate](https://learn.microsoft.com/en-us/azure/migrate/tutorial-discover-import#import-the-server-information). \\r\\n\\r\\n<div style='text-align: right; font-weight: bold;'>Download the Excel output here <span style='font-size: 3em;'>↴</span></div>\"},\"name\":\"text - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VMComputer\\r\\n| extend ipAddresses_concat = trim_end(';', strcat(strcat_array(Ipv4Addresses, ';'), ';', strcat_array(Ipv6Addresses, ';')))\\r\\n| extend hypervisor = iff(VirtualizationState == \\\"virtual\\\", case(VirtualMachineType == \\\"hyperv\\\", \\\"Hyper-V\\\", VirtualMachineType == \\\"vmware\\\", \\\"Vmware\\\", \\\"\\\"), \\\"\\\")\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == 'Processor'\\r\\n    | where Name == 'UtilizationPercentage'\\r\\n    | summarize cpuAvg = round(avg(Val), 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == 'Memory'\\r\\n    | where Name == 'AvailableMB'\\r\\n    | summarize availMemMbAvg = avg(Val) by Val,_ResourceId, Tags\\r\\n    | extend totalMemory = todouble(parse_json(Tags).['vm.azm.ms/memorySizeMB'])\\r\\n    | summarize utilMemoryPercent = round((100 - (avg(availMemMbAvg)/avg(totalMemory) * 100)), 2), totalMemory = round(avg(totalMemory)) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'WriteBytesPerSecond' or Name == 'ReadBytesPerSecond'\\r\\n    | extend networkDeviceId = tostring(parse_json(Tags).['vm.azm.ms/networkDeviceId'])\\r\\n    | summarize by _ResourceId, networkDeviceId\\r\\n    | summarize numberOfNetworkInterfaces = count() by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'ReadBytesPerSecond'\\r\\n    | where Val > 0\\r\\n    | summarize networkReadMbPerSecondAvg = round(avg(Val)/1024/1024, 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'WriteBytesPerSecond'\\r\\n    | where Val > 0\\r\\n    | summarize networkWriteMbPerSecondAvg = round(avg(Val)/1024/1024, 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpacePercentage\\\"\\r\\n    | summarize by Tags, _ResourceId\\r\\n    | summarize numberOfLogicalDisks = count() by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpaceMB\\\"\\r\\n    | extend diskInfo = parse_json(Tags)\\r\\n    | extend spaceUsedInGB = round((todouble(diskInfo.['vm.azm.ms/diskSizeMB']) - Val)/1024, 2)\\r\\n    | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n    | summarize round(max(spaceUsedInGB), 2) by _ResourceId, diskName\\r\\n    | summarize totalDiskSpaceUsedInGB = round(sum(max_spaceUsedInGB), 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftsemi (\\r\\n    VMComputer\\r\\n    | where isnotempty(_ResourceId)\\r\\n    | summarize max(TimeGenerated) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.max_TimeGenerated\\r\\n| extend normalizedOsName = case(\\r\\n    OperatingSystemFullName has \\\"Windows Server (Unknown) build\\\",\\r\\n    \\\"Windows Server 2022\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2019\\\",\\r\\n    \\\"Windows Server 2019\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2016\\\",\\r\\n    \\\"Windows Server 2016\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2012\\\" and OperatingSystemFullName contains \\\"R2\\\",\\r\\n    \\\"Windows Server 2012 R2\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2012\\\",\\r\\n    \\\"Windows Server 2012\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2008\\\" and OperatingSystemFullName contains \\\"R2\\\",\\r\\n    \\\"Windows Server 2008 R2\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2008\\\",\\r\\n    \\\"Windows Server 2008\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2003\\\",\\r\\n    \\\"Windows Server 2003\\\",\\r\\n    OperatingSystemFullName has \\\"Ubuntu\\\",\\r\\n    \\\"Ubuntu Linux\\\",\\r\\n    OperatingSystemFullName\\r\\n)\\r\\n| summarize by ['Server name'] = Computer, \\r\\n            ['IP Addresses'] = ipAddresses_concat, \\r\\n            Cores = Cpus, \\r\\n            ['Memory (In MB)'] = totalMemory,\\r\\n            ['OS name'] = normalizedOsName,\\r\\n            ['OS version'] = \\\" \\\",\\r\\n            ['OS architecture'] = \\\" \\\",\\r\\n            ['Server type'] = iif(VirtualizationState == 'virtual', 'Virtual', 'Physical'),\\r\\n            ['Hypervisor'] = hypervisor,\\r\\n            ['CPU utilization percentage'] = cpuAvg,\\r\\n            ['Memory utilization percentage'] = utilMemoryPercent,\\r\\n            ['Network adapters'] = numberOfNetworkInterfaces,\\r\\n            ['Network In throughput'] = networkReadMbPerSecondAvg,\\r\\n            ['Network Out throughput'] = networkWriteMbPerSecondAvg,\\r\\n            ['Boot type'] = \\\" \\\",\\r\\n            ['Number of disks'] = numberOfLogicalDisks,\\r\\n            ['Storage in use (In GB)'] = totalDiskSpaceUsedInGB,\\r\\n            _ResourceId\\r\\n| join kind = leftouter ( \\r\\n        InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpaceMB\\\"\\r\\n    | extend diskInfo = parse_json(Tags)\\r\\n    | extend diskSize = round(todouble(diskInfo.['vm.azm.ms/diskSizeMB'])/1024)\\r\\n    | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n    | summarize max(diskSize) by _ResourceId, diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"ReadBytesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend readThroughputMBPerSecond = Val/1024/1024\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize round(avg(readThroughputMBPerSecond), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"WriteBytesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend writeThroughputMBPerSecond = Val/1024/1024\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize round(avg(writeThroughputMBPerSecond), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"ReadsPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend readsPerSecond = Val\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize round(avg(readsPerSecond), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"WritesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend writesPerSecond = Val\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize round(avg(writesPerSecond), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | sort by _ResourceId asc, diskName asc\\r\\n    | extend diskNumber=tostring(row_number(1, prev(_ResourceId) != _ResourceId))\\r\\n    | extend numberedDiskId = strcat(\\\"Disk \\\", diskNumber)\\r\\n    | extend diskBag = bag_pack( \\r\\n        strcat(numberedDiskId, \\\" size (In GB)\\\"), max_diskSize, \\r\\n        strcat(numberedDiskId, \\\" read throughput (MB per second)\\\"), avg_readThroughputMBPerSecond, \\r\\n        strcat(numberedDiskId, \\\" write throughput (MB per second)\\\"), avg_writeThroughputMBPerSecond, \\r\\n        strcat(numberedDiskId, \\\" read ops (operations per second)\\\"), avg_readsPerSecond, \\r\\n        strcat(numberedDiskId, \\\" write ops (operations per second)\\\"), avg_writesPerSecond\\r\\n        ) \\r\\n    | summarize disks = make_bag(diskBag) by _ResourceId\\r\\n) on $left._ResourceId == $right._ResourceId\\r\\n| evaluate bag_unpack(disks)\\r\\n| project-away _ResourceId, _ResourceId1\",\"size\":0,\"title\":\"Average Performance Inventory - VM Insights\",\"timeContextFromParameter\":\"TimeFrame\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{VMInsightsLogAnalyticsWorkspace}\"]},\"name\":\"Average Performance Inventory via VM Insights\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let percent = toint(iif(isempty('{Percentile}'), '99', '{Percentile}'));\\r\\n\\r\\nVMComputer\\r\\n| extend ipAddresses_concat = trim_end(';', strcat(strcat_array(Ipv4Addresses, ';'), ';', strcat_array(Ipv6Addresses, ';')))\\r\\n| extend hypervisor = iff(VirtualizationState == \\\"virtual\\\", case(VirtualMachineType == \\\"hyperv\\\", \\\"Hyper-V\\\", VirtualMachineType == \\\"vmware\\\", \\\"Vmware\\\", \\\"\\\"), \\\"\\\")\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == 'Processor'\\r\\n    | where Name == 'UtilizationPercentage'\\r\\n    | summarize cpuAvg = round(percentile(Val, percent), 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == 'Memory'\\r\\n    | where Name == 'AvailableMB'\\r\\n    | summarize availMemMbAvg = avg(Val) by Val,_ResourceId, Tags\\r\\n    | extend totalMemory = todouble(parse_json(Tags).['vm.azm.ms/memorySizeMB'])\\r\\n    | summarize utilMemoryPercent = round((100 - (percentile(availMemMbAvg, 2)/avg(totalMemory) * 100)), 2), totalMemory = round(avg(totalMemory)) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'WriteBytesPerSecond' or Name == 'ReadBytesPerSecond'\\r\\n    | extend networkDeviceId = tostring(parse_json(Tags).['vm.azm.ms/networkDeviceId'])\\r\\n    | summarize by _ResourceId, networkDeviceId\\r\\n    | summarize numberOfNetworkInterfaces = count() by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'ReadBytesPerSecond'\\r\\n    | where Val > 0\\r\\n    | summarize networkReadMbPerSecondAvg = round(percentile(Val, percent)/1024/1024, 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'WriteBytesPerSecond'\\r\\n    | where Val > 0\\r\\n    | summarize networkWriteMbPerSecondAvg = round(percentile(Val, percent)/1024/1024, 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpacePercentage\\\"\\r\\n    | summarize by Tags, _ResourceId\\r\\n    | summarize numberOfLogicalDisks = count() by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpaceMB\\\"\\r\\n    | extend diskInfo = parse_json(Tags)\\r\\n    | extend spaceUsedInGB = round((todouble(diskInfo.['vm.azm.ms/diskSizeMB']) - Val)/1024, 2)\\r\\n    | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n    | summarize max(spaceUsedInGB) by _ResourceId, diskName\\r\\n    | summarize totalDiskSpaceUsedInGB = round(sum(max_spaceUsedInGB), 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftsemi (\\r\\n    VMComputer\\r\\n    | where isnotempty(_ResourceId)\\r\\n    | summarize max(TimeGenerated) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.max_TimeGenerated\\r\\n| extend normalizedOsName = case(\\r\\n    OperatingSystemFullName has \\\"Windows Server (Unknown) build\\\",\\r\\n    \\\"Windows Server 2022\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2019\\\",\\r\\n    \\\"Windows Server 2019\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2016\\\",\\r\\n    \\\"Windows Server 2016\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2012\\\" and OperatingSystemFullName contains \\\"R2\\\",\\r\\n    \\\"Windows Server 2012 R2\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2012\\\",\\r\\n    \\\"Windows Server 2012\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2008\\\" and OperatingSystemFullName contains \\\"R2\\\",\\r\\n    \\\"Windows Server 2008 R2\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2008\\\",\\r\\n    \\\"Windows Server 2008\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2003\\\",\\r\\n    \\\"Windows Server 2003\\\",\\r\\n    OperatingSystemFullName has \\\"Ubuntu\\\",\\r\\n    \\\"Ubuntu Linux\\\",\\r\\n    OperatingSystemFullName\\r\\n)\\r\\n| summarize by ['Server name'] = Computer, \\r\\n            ['IP Addresses'] = ipAddresses_concat, \\r\\n            Cores = Cpus, \\r\\n            ['Memory (In MB)'] = totalMemory,\\r\\n            ['OS name'] = normalizedOsName,\\r\\n            ['OS version'] = \\\" \\\",\\r\\n            ['OS architecture'] = \\\" \\\",\\r\\n            ['Server type'] = iif(VirtualizationState == 'virtual', 'Virtual', 'Physical'),\\r\\n            ['Hypervisor'] = hypervisor,\\r\\n            ['CPU utilization percentage'] = cpuAvg,\\r\\n            ['Memory utilization percentage'] = utilMemoryPercent,\\r\\n            ['Network adapters'] = numberOfNetworkInterfaces,\\r\\n            ['Network In throughput'] = networkReadMbPerSecondAvg,\\r\\n            ['Network Out throughput'] = networkWriteMbPerSecondAvg,\\r\\n            ['Boot type'] = \\\" \\\",\\r\\n            ['Number of disks'] = numberOfLogicalDisks,\\r\\n            ['Storage in use (In GB)'] = totalDiskSpaceUsedInGB,\\r\\n            _ResourceId\\r\\n| join kind = leftouter ( \\r\\n        InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpaceMB\\\"\\r\\n    | extend diskInfo = parse_json(Tags)\\r\\n    | extend diskSize = round(todouble(diskInfo.['vm.azm.ms/diskSizeMB'])/1024)\\r\\n    | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n    | summarize max(diskSize) by _ResourceId, diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"ReadBytesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend readThroughputMBPerSecond = Val/1024/1024\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize readThroughputMBPerSecond = round(percentile(readThroughputMBPerSecond, percent), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"WriteBytesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend writeThroughputMBPerSecond = Val/1024/1024\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize writeThroughputMBPerSecond = round(percentile(writeThroughputMBPerSecond, percent), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"ReadsPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend readsPerSecond = Val\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize readsPerSecond = round(percentile(readsPerSecond, percent), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"WritesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend writesPerSecond = Val\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize writesPerSecond = round(percentile(writesPerSecond, percent), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | sort by _ResourceId asc, diskName asc\\r\\n    | extend diskNumber=tostring(row_number(1, prev(_ResourceId) != _ResourceId))\\r\\n    | extend numberedDiskId = strcat(\\\"Disk \\\", diskNumber)\\r\\n    | extend diskBag = bag_pack( \\r\\n        strcat(numberedDiskId, \\\" size (In GB)\\\"), max_diskSize, \\r\\n        strcat(numberedDiskId, \\\" read throughput (MB per second)\\\"), readThroughputMBPerSecond, \\r\\n        strcat(numberedDiskId, \\\" write throughput (MB per second)\\\"), writeThroughputMBPerSecond, \\r\\n        strcat(numberedDiskId, \\\" read ops (operations per second)\\\"), readsPerSecond, \\r\\n        strcat(numberedDiskId, \\\" write ops (operations per second)\\\"), writesPerSecond\\r\\n        ) \\r\\n    | summarize disks = make_bag(diskBag) by _ResourceId\\r\\n) on $left._ResourceId == $right._ResourceId\\r\\n| evaluate bag_unpack(disks)\\r\\n| project-away _ResourceId, _ResourceId1\",\"size\":0,\"title\":\"Percentile Performance Inventory - VM Insights\",\"timeContextFromParameter\":\"TimeFrame\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{VMInsightsLogAnalyticsWorkspace}\"]},\"name\":\"Percentile Performance Inventory via VM Insights\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VMComputer\\r\\n| extend ipAddresses_concat = trim_end(';', strcat(strcat_array(Ipv4Addresses, ';'), ';', strcat_array(Ipv6Addresses, ';')))\\r\\n| extend hypervisor = iff(VirtualizationState == \\\"virtual\\\", case(VirtualMachineType == \\\"hyperv\\\", \\\"Hyper-V\\\", VirtualMachineType == \\\"vmware\\\", \\\"Vmware\\\", \\\"\\\"), \\\"\\\")\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == 'Processor'\\r\\n    | where Name == 'UtilizationPercentage'\\r\\n    | summarize cpuAvg = round(max(Val), 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == 'Memory'\\r\\n    | where Name == 'AvailableMB'\\r\\n    | summarize availMemMbAvg = min(Val) by Val,_ResourceId, Tags\\r\\n    | extend totalMemory = todouble(parse_json(Tags).['vm.azm.ms/memorySizeMB'])\\r\\n    | summarize utilMemoryPercent = round((100 - (min(availMemMbAvg)/max(totalMemory) * 100)), 2), totalMemory = round(max(totalMemory)) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'WriteBytesPerSecond' or Name == 'ReadBytesPerSecond'\\r\\n    | extend networkDeviceId = tostring(parse_json(Tags).['vm.azm.ms/networkDeviceId'])\\r\\n    | summarize by _ResourceId, networkDeviceId\\r\\n    | summarize numberOfNetworkInterfaces = count() by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'ReadBytesPerSecond'\\r\\n    | where Val > 0\\r\\n    | summarize networkReadMbPerSecondAvg = round(max(Val)/1024/1024, 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"Network\\\"\\r\\n    | where Name == 'WriteBytesPerSecond'\\r\\n    | where Val > 0\\r\\n    | summarize networkWriteMbPerSecondAvg = round(max(Val)/1024/1024, 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpacePercentage\\\"\\r\\n    | summarize by Tags, _ResourceId\\r\\n    | summarize numberOfLogicalDisks = count() by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftouter (\\r\\n    InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpaceMB\\\"\\r\\n    | extend diskInfo = parse_json(Tags)\\r\\n    | extend spaceUsedInGB = round((todouble(diskInfo.['vm.azm.ms/diskSizeMB']) - Val)/1024, 2)\\r\\n    | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n    | summarize round(max(spaceUsedInGB), 2) by _ResourceId, diskName\\r\\n    | summarize totalDiskSpaceUsedInGB = round(sum(max_spaceUsedInGB), 2) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId\\r\\n| join kind = leftsemi (\\r\\n    VMComputer\\r\\n    | where isnotempty(_ResourceId)\\r\\n    | summarize max(TimeGenerated) by _ResourceId\\r\\n)\\r\\non $left._ResourceId == $right._ResourceId and $left.TimeGenerated == $right.max_TimeGenerated\\r\\n| extend normalizedOsName = case(\\r\\n    OperatingSystemFullName has \\\"Windows Server (Unknown) build\\\",\\r\\n    \\\"Windows Server 2022\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2019\\\",\\r\\n    \\\"Windows Server 2019\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2016\\\",\\r\\n    \\\"Windows Server 2016\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2012\\\" and OperatingSystemFullName contains \\\"R2\\\",\\r\\n    \\\"Windows Server 2012 R2\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2012\\\",\\r\\n    \\\"Windows Server 2012\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2008\\\" and OperatingSystemFullName contains \\\"R2\\\",\\r\\n    \\\"Windows Server 2008 R2\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2008\\\",\\r\\n    \\\"Windows Server 2008\\\",\\r\\n    OperatingSystemFullName has \\\"Windows Server 2003\\\",\\r\\n    \\\"Windows Server 2003\\\",\\r\\n    OperatingSystemFullName has \\\"Ubuntu\\\",\\r\\n    \\\"Ubuntu Linux\\\",\\r\\n    OperatingSystemFullName\\r\\n)\\r\\n| summarize by ['Server name'] = Computer, \\r\\n            ['IP Addresses'] = ipAddresses_concat, \\r\\n            Cores = Cpus, \\r\\n            ['Memory (In MB)'] = totalMemory,\\r\\n            ['OS name'] = normalizedOsName,\\r\\n            ['OS version'] = \\\" \\\",\\r\\n            ['OS architecture'] = \\\" \\\",\\r\\n            ['Server type'] = iif(VirtualizationState == 'virtual', 'Virtual', 'Physical'),\\r\\n            ['Hypervisor'] = hypervisor,\\r\\n            ['CPU utilization percentage'] = cpuAvg,\\r\\n            ['Memory utilization percentage'] = utilMemoryPercent,\\r\\n            ['Network adapters'] = numberOfNetworkInterfaces,\\r\\n            ['Network In throughput'] = networkReadMbPerSecondAvg,\\r\\n            ['Network Out throughput'] = networkWriteMbPerSecondAvg,\\r\\n            ['Boot type'] = \\\" \\\",\\r\\n            ['Number of disks'] = numberOfLogicalDisks,\\r\\n            ['Storage in use (In GB)'] = totalDiskSpaceUsedInGB,\\r\\n            _ResourceId\\r\\n| join kind = leftouter ( \\r\\n        InsightsMetrics\\r\\n    | where Namespace == \\\"LogicalDisk\\\"\\r\\n    | where Name == \\\"FreeSpaceMB\\\"\\r\\n    | extend diskInfo = parse_json(Tags)\\r\\n    | extend diskSize = round(todouble(diskInfo.['vm.azm.ms/diskSizeMB'])/1024)\\r\\n    | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n    | summarize max(diskSize) by _ResourceId, diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"ReadBytesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend readThroughputMBPerSecond = Val/1024/1024\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize round(max(readThroughputMBPerSecond), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"WriteBytesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend writeThroughputMBPerSecond = Val/1024/1024\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize round(max(writeThroughputMBPerSecond), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"ReadsPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend readsPerSecond = Val\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize round(max(readsPerSecond), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | join kind = leftouter (\\r\\n        InsightsMetrics\\r\\n        | where Namespace == \\\"LogicalDisk\\\"\\r\\n        | where Name == \\\"WritesPerSecond\\\"\\r\\n        | extend diskInfo = parse_json(Tags)\\r\\n        | extend writesPerSecond = Val\\r\\n        | extend diskName = tostring(diskInfo.['vm.azm.ms/mountId'])\\r\\n        | summarize round(max(writesPerSecond), 2) by _ResourceId, diskName\\r\\n    )\\r\\n    on $left._ResourceId == $right._ResourceId and $left.diskName == $right.diskName\\r\\n    | sort by _ResourceId asc, diskName asc\\r\\n    | extend diskNumber=tostring(row_number(1, prev(_ResourceId) != _ResourceId))\\r\\n    | extend numberedDiskId = strcat(\\\"Disk \\\", diskNumber)\\r\\n    | extend diskBag = bag_pack( \\r\\n        strcat(numberedDiskId, \\\" size (In GB)\\\"), max_diskSize, \\r\\n        strcat(numberedDiskId, \\\" read throughput (MB per second)\\\"), max_readThroughputMBPerSecond, \\r\\n        strcat(numberedDiskId, \\\" write throughput (MB per second)\\\"), max_writeThroughputMBPerSecond, \\r\\n        strcat(numberedDiskId, \\\" read ops (operations per second)\\\"), max_readsPerSecond, \\r\\n        strcat(numberedDiskId, \\\" write ops (operations per second)\\\"), max_writesPerSecond\\r\\n        ) \\r\\n    | summarize disks = make_bag(diskBag) by _ResourceId\\r\\n) on $left._ResourceId == $right._ResourceId\\r\\n| evaluate bag_unpack(disks)\\r\\n| project-away _ResourceId, _ResourceId1\",\"size\":0,\"title\":\"Max Performance Inventory - VM Insights\",\"timeContextFromParameter\":\"TimeFrame\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{VMInsightsLogAnalyticsWorkspace}\"]},\"name\":\"Max Performance Inventory via VM Insights\"}]},\"conditionalVisibility\":{\"parameterName\":\"DataSource\",\"comparison\":\"isEqualTo\",\"value\":\"VM Insights\"},\"name\":\"VM Insights\"}],\"isLocked\":false,\"fallbackResourceIds\":[\"azure monitor\"]}",
        "version": "1.0",
        "sourceId": "[parameters('workbookSourceId')]",
        "category": "[parameters('workbookType')]"
      }
    }
  ],
  "outputs": {
    "workbookId": {
      "type": "string",
      "value": "[resourceId( 'microsoft.insights/workbooks', parameters('workbookId'))]"
    }
  },
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
}